name: Create Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Extract version from composer.json
        id: get_version
        run: |
          if [ ! -f "composer.json" ]; then
            echo "‚ùå composer.json not found!"
            exit 1
          fi
          
          VERSION=$(jq -r '.["package-version"] // empty' composer.json)
          
          if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
            echo "‚ùå No package version found in composer.json!"
            echo "Please add a 'package-version' field to your composer.json file."
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "‚úÖ Found version: $VERSION"

      - name: Extract release notes from CHANGELOG.md
        id: get_changelog
        run: |
          if [ ! -f "CHANGELOG.md" ]; then
            echo "‚ùå CHANGELOG.md not found!"
            exit 1
          fi
          
          # Extract the latest version section from CHANGELOG.md
          # This assumes the format: ## [version] - date
          VERSION="${{ steps.get_version.outputs.version }}"
          
          # Create a temporary file to store the release notes
          TEMP_FILE=$(mktemp)
          
          # Find the section for this version and extract content until the next version or end of file
          awk -v version="$VERSION" '
          BEGIN { found=0; printing=0 }
          /^## \[/ {
            if (found && printing) exit
            if ($0 ~ "\\[" version "\\]") {
              found=1
              printing=1
              next
            }
          }
          found && printing && /^## \[/ { exit }
          found && printing { print }
          ' CHANGELOG.md > "$TEMP_FILE"
          
          # Check if we found any content
          if [ ! -s "$TEMP_FILE" ]; then
            echo "‚ùå No changelog entry found for version $VERSION!"
            echo "Please add a changelog entry in the format: ## [$VERSION] - YYYY-MM-DD"
            rm "$TEMP_FILE"
            exit 1
          fi
          
          # Read the content and set as output (handling multiline)
          {
            echo 'release_notes<<EOF'
            cat "$TEMP_FILE"
            echo 'EOF'
          } >> $GITHUB_OUTPUT
          
          rm "$TEMP_FILE"
          echo "‚úÖ Found changelog entry for version $VERSION"

      - name: Check if tag already exists
        id: check_tag
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "‚ùå Tag v$VERSION already exists!"
            echo "Please update the version in composer.json before creating a release."
            exit 1
          fi
          echo "‚úÖ Tag v$VERSION does not exist, proceeding..."

      - name: Create release branch
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          BRANCH_NAME="release-$VERSION"
          
          # Check if branch already exists
          if git show-ref --verify --quiet refs/heads/$BRANCH_NAME; then
            echo "‚ùå Branch $BRANCH_NAME already exists!"
            exit 1
          fi
          
          git checkout -b $BRANCH_NAME
          echo "‚úÖ Created release branch: $BRANCH_NAME"

      - name: Create and push tag
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          git tag -a "v$VERSION" -m "Release $VERSION"
          echo "‚úÖ Created tag v$VERSION"

      - name: Push changes and tags
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          
          git push origin "release-$VERSION"
          echo "‚úÖ Pushed release branch"
          
          git push origin "v$VERSION"
          echo "‚úÖ Pushed tag"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## Release Notes
            
            ${{ steps.get_changelog.outputs.release_notes }}
            
            ---
            
            ## Installation
            
            ```bash
            composer require whilesmart/laravel-oauth-apps
            ```
            
            ## Documentation
            
            See the [README](README.md) for usage instructions.
            
            ## Full Changelog
            
            View the complete version history in [CHANGELOG.md](CHANGELOG.md).
          draft: true
          prerelease: false


      - name: Summary
        if: success()
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "## üéâ Release Creation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Successfully Created Release v$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**What was done:**" >> $GITHUB_STEP_SUMMARY
          echo "- üìñ Extracted version from \`composer.json\`" >> $GITHUB_STEP_SUMMARY
          echo "- üìù Extracted release notes from \`CHANGELOG.md\`" >> $GITHUB_STEP_SUMMARY
          echo "- üè∑Ô∏è Created and pushed git tag \`v$VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "- üöÄ Created **DRAFT** GitHub release" >> $GITHUB_STEP_SUMMARY
          echo "- üåø Created release branch \`release-$VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [üìã View Release](https://github.com/${{ github.repository }}/releases/tag/v$VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "- [üìù View Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [üîÑ View Pull Request](https://github.com/${{ github.repository }}/pulls)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Release Notes Preview" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.get_changelog.outputs.release_notes }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY